{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.12.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "cdk-selectable!",
  "docComment": "/**\n * A component development kit used to create a set of selectable components\n *\n * @packageDocumentation\n */\n",
  "name": "cdk-selectable",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "cdk-selectable!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "cdk-selectable!CdkSelectableContainerDirective:class",
          "docComment": "/**\n * Add to a element to make it a container component for selectable components that inherits from the {@link CdkSelectableItemBaseComponent}.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CdkSelectableContainerDirective "
            }
          ],
          "releaseTag": "Public",
          "name": "CdkSelectableContainerDirective",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "cdk-selectable!CdkSelectableContainerDirective:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CdkSelectableContainerDirective` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(presenter: "
                },
                {
                  "kind": "Reference",
                  "text": "CdkSelectablePresenter",
                  "canonicalReference": "cdk-selectable!CdkSelectablePresenter:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "presenter",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectableContainerDirective#getSelectedIds:member",
              "docComment": "/**\n * Get an array of the currently selected ids\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSelectedIds: "
                },
                {
                  "kind": "Content",
                  "text": "() => (string | number)[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getSelectedIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "cdk-selectable!CdkSelectableContainerDirective#ngOnDestroy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ngOnDestroy(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "ngOnDestroy"
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectableContainerDirective#resetSelections:member",
              "docComment": "/**\n * Set the selected status of all items to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetSelections: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resetSelections",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectableContainerDirective#selectionChanged:member",
              "docComment": "/**\n * Emits an array of currently selected ids when an item in the container changes its selected status.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@angular/core!EventEmitter:interface"
                },
                {
                  "kind": "Content",
                  "text": "<(string | number)[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selectionChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "cdk-selectable!CdkSelectableItemBaseComponent:class",
          "docComment": "/**\n * A base for a selectable component contained in an {@link CdkSelectableContainerDirective}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class CdkSelectableItemBaseComponent "
            }
          ],
          "releaseTag": "Public",
          "name": "CdkSelectableItemBaseComponent",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "cdk-selectable!CdkSelectableItemBaseComponent:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CdkSelectableItemBaseComponent` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(presenter: "
                },
                {
                  "kind": "Reference",
                  "text": "CdkSelectablePresenter",
                  "canonicalReference": "cdk-selectable!CdkSelectablePresenter:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "presenter",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectableItemBaseComponent#defaultState:member",
              "docComment": "/**\n * A default selected state of the component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultState: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "defaultState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectableItemBaseComponent#id:member",
              "docComment": "/**\n * Get a unique identifier value for the component to track the selected status.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get id(): "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset id(value: string | number);"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectableItemBaseComponent#isSelected$:member",
              "docComment": "/**\n * Get an observable emitting the selected status when the selected status changes for a specified id.\n *\n * @param id - The id of the item you desire to observe\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSelected$: "
                },
                {
                  "kind": "Content",
                  "text": "(id: string | number) => "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IdSelectPair",
                  "canonicalReference": "cdk-selectable!IdSelectPair:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isSelected$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "cdk-selectable!CdkSelectableItemBaseComponent#ngOnDestroy:member(1)",
              "docComment": "/**\n * Clean up when the component is destroyed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ngOnDestroy(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "ngOnDestroy"
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectableItemBaseComponent#toggleSelection:member",
              "docComment": "/**\n * Toggle the selected status of the component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toggleSelection: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toggleSelection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "cdk-selectable!CdkSelectableModule:class",
          "docComment": "/**\n * Responsible for exporting the {@link CdkSelectableContainerDirective}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CdkSelectableModule "
            }
          ],
          "releaseTag": "Public",
          "name": "CdkSelectableModule",
          "members": [],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "cdk-selectable!CdkSelectablePresenter:class",
          "docComment": "/**\n * Responsible for providing the view logic shared by the selectable components in the scope.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CdkSelectablePresenter "
            }
          ],
          "releaseTag": "Public",
          "name": "CdkSelectablePresenter",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CdkSelectablePresenter` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter#addEntry:member",
              "docComment": "/**\n * Add an item to keep track of its selected status.\n *\n * @param id - The id of the item that should be added\n *\n * @param selected - An initial selected status for the item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEntry: "
                },
                {
                  "kind": "Content",
                  "text": "(id: string | number, selected?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "addEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter#isSelected$:member",
              "docComment": "/**\n * Get an observable emitting the selected status when the selected status changes for a specified id.\n *\n * @param id - The id of the item you desire to observe\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSelected$: "
                },
                {
                  "kind": "Content",
                  "text": "(id: string | number) => "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IdSelectPair",
                  "canonicalReference": "cdk-selectable!IdSelectPair:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isSelected$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter#removeEntry:member",
              "docComment": "/**\n * Remove the specified item from the map\n *\n * @param id - The id of the item that should be removed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeEntry: "
                },
                {
                  "kind": "Content",
                  "text": "(id: string | number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removeEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter#resetSelections:member(1)",
              "docComment": "/**\n * Set the selected status of all items to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetSelections(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "resetSelections"
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter#selectedMap:member",
              "docComment": "/**\n * Get the current select status of all items\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectedMap(): "
                },
                {
                  "kind": "Reference",
                  "text": "SelectedMap",
                  "canonicalReference": "cdk-selectable!SelectedMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selectedMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter#selectedMap$:member",
              "docComment": "/**\n * An observable that emits the current selected status of all items when a selected status changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedMap$: "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SelectedMap",
                  "canonicalReference": "cdk-selectable!SelectedMap:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selectedMap$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cdk-selectable!CdkSelectablePresenter#updateEntry:member",
              "docComment": "/**\n * Update the selected status of a specified id\n *\n * @param id - The id of the item that should be updated\n *\n * @param selected - A new selected status for the item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateEntry: "
                },
                {
                  "kind": "Content",
                  "text": "(id: string | number, selected: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updateEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "cdk-selectable!IdSelectPair:interface",
          "docComment": "/**\n * Represents an id and a selected status for the given id.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IdSelectPair "
            }
          ],
          "releaseTag": "Public",
          "name": "IdSelectPair",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "cdk-selectable!IdSelectPair#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cdk-selectable!IdSelectPair#selected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "cdk-selectable!SelectedMap:type",
          "docComment": "/**\n * Represents a map of ids and associated {@link IdSelectPair}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SelectedMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    [key: string]: "
            },
            {
              "kind": "Reference",
              "text": "IdSelectPair",
              "canonicalReference": "cdk-selectable!IdSelectPair:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SelectedMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        }
      ]
    }
  ]
}
