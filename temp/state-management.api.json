{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.12.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "state-management!",
  "docComment": "/**\n * A library for managing local and global state.\n *\n * @remarks\n *\n * The implementation is similar to the redux design pattern.\n *\n * @packageDocumentation\n */\n",
  "name": "state-management",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "state-management!",
      "name": "",
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "state-management!_createReducer:var",
          "docComment": "/**\n * Helper function that creates a reducer\n *\n * @param type - The action type that triggers the reducer\n *\n * @param reducerFn - The reducerFn that should be executed\n *\n * @returns A reducer with the specified parameters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_createReducer: "
            },
            {
              "kind": "Content",
              "text": "<TState, TAction extends "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": ">(type: string, reducerFn: "
            },
            {
              "kind": "Reference",
              "text": "ReducerFn",
              "canonicalReference": "state-management!ReducerFn:type"
            },
            {
              "kind": "Content",
              "text": "<TState, TAction>) => "
            },
            {
              "kind": "Reference",
              "text": "Reducer",
              "canonicalReference": "state-management!Reducer:interface"
            },
            {
              "kind": "Content",
              "text": "<TState, TAction>"
            }
          ],
          "releaseTag": "Public",
          "name": "_createReducer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "state-management!ActionDispatcher:class",
          "docComment": "/**\n * Responsible for providing an action observer of dispatched actions. Primarily used by {@link EffectsSubscriber} to handle effects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ActionDispatcher "
            }
          ],
          "releaseTag": "Public",
          "name": "ActionDispatcher",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "state-management!ActionDispatcher#actions$:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actions$: "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DispatchedAction",
                  "canonicalReference": "state-management!DispatchedAction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "actions$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "state-management!ActionDispatcher#dispatch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispatch(action: "
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ", stateSnapshot: "
                },
                {
                  "kind": "Reference",
                  "text": "Immutable",
                  "canonicalReference": "state-management!Immutable:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "stateSnapshot",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "dispatch"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "state-management!ActionInterceptor:interface",
          "docComment": "/**\n * Represents a class for intercepting actions dispatched to the {@link Store} in its provider scope. Provided with token {@link STORE_ACTION_INTERCEPTORS}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActionInterceptor "
            }
          ],
          "releaseTag": "Public",
          "name": "ActionInterceptor",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "state-management!ActionInterceptor#intercept:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intercept(action: "
                },
                {
                  "kind": "Reference",
                  "text": "Immutable",
                  "canonicalReference": "state-management!Immutable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Maybe",
                  "canonicalReference": "state-management!Maybe:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "intercept"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "state-management!ComponentStore:class",
          "docComment": "/**\n * Responsible for providing read and write access to a local state within its provider scope.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ComponentStore<TState> extends "
            },
            {
              "kind": "Reference",
              "text": "StoreBase",
              "canonicalReference": "state-management!StoreBase:class"
            },
            {
              "kind": "Content",
              "text": "<TState> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ComponentStore",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "state-management!ComponentStore:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ComponentStore` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(hostStore: "
                },
                {
                  "kind": "Reference",
                  "text": "Store",
                  "canonicalReference": "state-management!Store:class"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ", dispatcher: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionDispatcher",
                  "canonicalReference": "state-management!ActionDispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": ", reducers: "
                },
                {
                  "kind": "Reference",
                  "text": "Reducer",
                  "canonicalReference": "state-management!Reducer:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown, "
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": ", metaReducers: "
                },
                {
                  "kind": "Reference",
                  "text": "MetaReducer",
                  "canonicalReference": "state-management!MetaReducer:type"
                },
                {
                  "kind": "Content",
                  "text": "<unknown, "
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": ", interceptors: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionInterceptor",
                  "canonicalReference": "state-management!ActionInterceptor:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", defaultState: "
                },
                {
                  "kind": "Reference",
                  "text": "UnknownState",
                  "canonicalReference": "state-management!UnknownState:type"
                },
                {
                  "kind": "Content",
                  "text": ", storeSettings: "
                },
                {
                  "kind": "Reference",
                  "text": "StoreSettings",
                  "canonicalReference": "state-management!StoreSettings:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hostStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "dispatcher",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "reducers",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "metaReducers",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 15
                  }
                },
                {
                  "parameterName": "interceptors",
                  "parameterTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 18
                  }
                },
                {
                  "parameterName": "defaultState",
                  "parameterTypeTokenRange": {
                    "startIndex": 19,
                    "endIndex": 20
                  }
                },
                {
                  "parameterName": "storeSettings",
                  "parameterTypeTokenRange": {
                    "startIndex": 21,
                    "endIndex": 22
                  }
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!ComponentStoreProviders:var",
          "docComment": "/**\n * A collection of providers required for a {@link ComponentStore} Should be injected in the components providers array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ComponentStoreProviders: "
            },
            {
              "kind": "Reference",
              "text": "Provider",
              "canonicalReference": "@angular/core!Provider:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            }
          ],
          "releaseTag": "Public",
          "name": "ComponentStoreProviders",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "state-management!DispatchedAction:interface",
          "docComment": "/**\n * Represents an action that has been dispatched by a {@link Store}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DispatchedAction<TAction extends "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": ", TState = "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TAction",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "DispatchedAction",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!DispatchedAction#action:member",
              "docComment": "/**\n * The action that was dispatched\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "action: "
                },
                {
                  "kind": "Reference",
                  "text": "Immutable",
                  "canonicalReference": "state-management!Immutable:type"
                },
                {
                  "kind": "Content",
                  "text": "<TAction>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "action",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!DispatchedAction#stateSnapshot:member",
              "docComment": "/**\n * A snapshot of the state when the action was dispatched\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateSnapshot: "
                },
                {
                  "kind": "Reference",
                  "text": "Immutable",
                  "canonicalReference": "state-management!Immutable:type"
                },
                {
                  "kind": "Content",
                  "text": "<TState>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stateSnapshot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "state-management!Effect:interface",
          "docComment": "/**\n * Represents a class for handling side effects on dispatched action(s). Provided with token {@link STORE_EFFECTS}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Effect<TAction extends "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TAction",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Effect",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "state-management!Effect#handle$:member(1)",
              "docComment": "/**\n * A handler function that listens to the action observer.\n *\n * @param actions$ - An action observer\n *\n * @returns A new action to be dispatched\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handle$(actions$: "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DispatchedAction",
                  "canonicalReference": "state-management!DispatchedAction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TAction>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Immutable",
                  "canonicalReference": "state-management!Immutable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "actions$",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "handle$"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!Effect#onErrorAction:member",
              "docComment": "/**\n * If set, this action is dispatched if any errors occur in the action observer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onErrorAction?: "
                },
                {
                  "kind": "Content",
                  "text": "(err: unknown) => "
                },
                {
                  "kind": "Reference",
                  "text": "Immutable",
                  "canonicalReference": "state-management!Immutable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onErrorAction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "state-management!EffectsSubscriber:class",
          "docComment": "/**\n * Responsible for injecting effects (see {@link Effect}) within its provider scope Effects are handled be subscribing and dispatching the returning actions to the store.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EffectsSubscriber "
            }
          ],
          "releaseTag": "Public",
          "name": "EffectsSubscriber",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "state-management!EffectsSubscriber:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EffectsSubscriber` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(store: "
                },
                {
                  "kind": "Reference",
                  "text": "Store",
                  "canonicalReference": "state-management!Store:class"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ", dispatcher: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionDispatcher",
                  "canonicalReference": "state-management!ActionDispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": ", effects: "
                },
                {
                  "kind": "Reference",
                  "text": "Effect",
                  "canonicalReference": "state-management!Effect:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "store",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "dispatcher",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "effects",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "state-management!EffectsSubscriber#ngOnDestroy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ngOnDestroy(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "ngOnDestroy"
            },
            {
              "kind": "Property",
              "canonicalReference": "state-management!EffectsSubscriber#onEffectsInit$:member",
              "docComment": "/**\n * A lifecycle hook that emits when all effects are subscribed to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEffectsInit$: "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onEffectsInit$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!listenTo:var",
          "docComment": "/**\n * An rxjs operator used to filter the types of actions provided from an action observer.\n *\n * @param types - The types of actions that should emit\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "listenTo: "
            },
            {
              "kind": "Content",
              "text": "<TAction extends "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": ", TState>(types: string[]) => (source: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DispatchedAction",
              "canonicalReference": "state-management!DispatchedAction:interface"
            },
            {
              "kind": "Content",
              "text": "<TAction, TState>>) => "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DispatchedAction",
              "canonicalReference": "state-management!DispatchedAction:interface"
            },
            {
              "kind": "Content",
              "text": "<TAction, TState>>"
            }
          ],
          "releaseTag": "Public",
          "name": "listenTo",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "state-management!MetaReducer:type",
          "docComment": "/**\n * Represents a function for intercepting reducers before they are processed. Provided with token {@link STORE_META_REDUCERS}\n *\n * @param reducer - A merged reducer consisting of the reducers associated with the triggering action\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MetaReducer<TState, TAction extends "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(reducer: "
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Reducer",
              "canonicalReference": "state-management!Reducer:interface"
            },
            {
              "kind": "Content",
              "text": "<TState, TAction>>) => "
            },
            {
              "kind": "Reference",
              "text": "Reducer",
              "canonicalReference": "state-management!Reducer:interface"
            },
            {
              "kind": "Content",
              "text": "<TState, TAction>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MetaReducer",
          "typeParameters": [
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TAction",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "state-management!Reducer:interface",
          "docComment": "/**\n * Represents an object used to modify state on a specified action. Provided with token {@link STORE_REDUCERS}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Reducer<TState, TAction extends "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TAction",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Reducer",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!Reducer#reducerFn:member",
              "docComment": "/**\n * The reducerFn that should be triggered on specified action.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reducerFn: "
                },
                {
                  "kind": "Reference",
                  "text": "ReducerFn",
                  "canonicalReference": "state-management!ReducerFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<TState, TAction>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reducerFn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!Reducer#type:member",
              "docComment": "/**\n * The action that triggers the reducer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "state-management!ReducerFn:type",
          "docComment": "/**\n * Represents a pure function that modifies state\n *\n * @param state - \n *\n * @param action - The action that triggers the {@link Reducer}\n *\n * @returns The modified state\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReducerFn<TState, TAction> = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<TState>, action: "
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<TAction>) => "
            },
            {
              "kind": "Reference",
              "text": "Maybe",
              "canonicalReference": "state-management!Maybe:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<TState>>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ReducerFn",
          "typeParameters": [
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TAction",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!select:var",
          "docComment": "/**\n * An rxjs operator used to select a specified slice from state and only emit when its value changes.\n *\n * @param props - The properties on state that should be selected.\n *\n * @returns The slice of state that corresponds with the specified properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "select: "
            },
            {
              "kind": "Content",
              "text": "<TState, TSlice = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<TState>>(props: "
            },
            {
              "kind": "Reference",
              "text": "ImmutableArray",
              "canonicalReference": "state-management!ImmutableArray:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<keyof TState, string>>) => (source: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<TState>>) => "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<TSlice>>"
            }
          ],
          "releaseTag": "Public",
          "name": "select",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!selectProp:var",
          "docComment": "/**\n * An rxjs operator used to select a specified property from state and only emit when its value changes.\n *\n * @param prop - The property on state that should be selected.\n *\n * @returns The value that corresponds with the specified property on state\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "selectProp: "
            },
            {
              "kind": "Content",
              "text": "<TState, TResult>(prop: "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<TState>, string>) => (source: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<TState>>) => "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Immutable",
              "canonicalReference": "state-management!Immutable:type"
            },
            {
              "kind": "Content",
              "text": "<TResult>>"
            }
          ],
          "releaseTag": "Public",
          "name": "selectProp",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "state-management!StateAction:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StateAction "
            }
          ],
          "releaseTag": "Public",
          "name": "StateAction",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!StateAction#propagate:member",
              "docComment": "/**\n * If true the action will be dispatched to all stores higher up in the dependency tree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propagate?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "propagate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!StateAction#type:member",
              "docComment": "/**\n * A string value uniquely identifying the action\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!StateAction:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StateAction = \"STATE_ACTION\""
            }
          ],
          "releaseTag": "Public",
          "name": "StateAction",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "state-management!StateManagementModule:class",
          "docComment": "/**\n * Responsible for providing core state services Required in root and any feature modules that configures state providers like {@link Reducer} or {@link Effect}.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StateManagementModule "
            }
          ],
          "releaseTag": "Public",
          "name": "StateManagementModule",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "state-management!StateManagementModule:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StateManagementModule` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(effectsSubscriber: "
                },
                {
                  "kind": "Reference",
                  "text": "EffectsSubscriber",
                  "canonicalReference": "state-management!EffectsSubscriber:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "effectsSubscriber",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!STORE_ACTION_INTERCEPTORS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "STORE_ACTION_INTERCEPTORS: "
            },
            {
              "kind": "Reference",
              "text": "InjectionToken",
              "canonicalReference": "@angular/core!InjectionToken:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ActionInterceptor",
              "canonicalReference": "state-management!ActionInterceptor:interface"
            },
            {
              "kind": "Content",
              "text": "[]>"
            }
          ],
          "releaseTag": "Public",
          "name": "STORE_ACTION_INTERCEPTORS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!STORE_DEFAULT_STATE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "STORE_DEFAULT_STATE: "
            },
            {
              "kind": "Reference",
              "text": "InjectionToken",
              "canonicalReference": "@angular/core!InjectionToken:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Object",
              "canonicalReference": "!Object:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "STORE_DEFAULT_STATE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!STORE_EFFECTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "STORE_EFFECTS: "
            },
            {
              "kind": "Reference",
              "text": "InjectionToken",
              "canonicalReference": "@angular/core!InjectionToken:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Effect",
              "canonicalReference": "state-management!Effect:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": ">[]>"
            }
          ],
          "releaseTag": "Public",
          "name": "STORE_EFFECTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!STORE_META_REDUCERS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "STORE_META_REDUCERS: "
            },
            {
              "kind": "Reference",
              "text": "InjectionToken",
              "canonicalReference": "@angular/core!InjectionToken:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MetaReducer",
              "canonicalReference": "state-management!MetaReducer:type"
            },
            {
              "kind": "Content",
              "text": "<unknown, "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": ">[]>"
            }
          ],
          "releaseTag": "Public",
          "name": "STORE_META_REDUCERS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!STORE_REDUCERS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "STORE_REDUCERS: "
            },
            {
              "kind": "Reference",
              "text": "InjectionToken",
              "canonicalReference": "@angular/core!InjectionToken:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Reducer",
              "canonicalReference": "state-management!Reducer:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown, "
            },
            {
              "kind": "Reference",
              "text": "StateAction",
              "canonicalReference": "state-management!StateAction:interface"
            },
            {
              "kind": "Content",
              "text": ">[]>"
            }
          ],
          "releaseTag": "Public",
          "name": "STORE_REDUCERS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "state-management!STORE_SETTINGS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "STORE_SETTINGS: "
            },
            {
              "kind": "Reference",
              "text": "InjectionToken",
              "canonicalReference": "@angular/core!InjectionToken:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StoreSettings",
              "canonicalReference": "state-management!StoreSettings:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "STORE_SETTINGS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "state-management!Store:class",
          "docComment": "/**\n * Responsible for providing read and write access to global state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Store<TState> extends "
            },
            {
              "kind": "Reference",
              "text": "StoreBase",
              "canonicalReference": "state-management!StoreBase:class"
            },
            {
              "kind": "Content",
              "text": "<TState> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Store",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "state-management!Store:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Store` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(hostStore: "
                },
                {
                  "kind": "Reference",
                  "text": "Store",
                  "canonicalReference": "state-management!Store:class"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ", actionDispatcher: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionDispatcher",
                  "canonicalReference": "state-management!ActionDispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": ", reducers: "
                },
                {
                  "kind": "Reference",
                  "text": "Reducer",
                  "canonicalReference": "state-management!Reducer:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown, "
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": ", metaReducers: "
                },
                {
                  "kind": "Reference",
                  "text": "MetaReducer",
                  "canonicalReference": "state-management!MetaReducer:type"
                },
                {
                  "kind": "Content",
                  "text": "<unknown, "
                },
                {
                  "kind": "Reference",
                  "text": "StateAction",
                  "canonicalReference": "state-management!StateAction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": ", interceptors: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionInterceptor",
                  "canonicalReference": "state-management!ActionInterceptor:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", defaultState: "
                },
                {
                  "kind": "Reference",
                  "text": "UnknownState",
                  "canonicalReference": "state-management!UnknownState:type"
                },
                {
                  "kind": "Content",
                  "text": ", storeSettings: "
                },
                {
                  "kind": "Reference",
                  "text": "StoreSettings",
                  "canonicalReference": "state-management!StoreSettings:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hostStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "actionDispatcher",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "reducers",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "metaReducers",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 15
                  }
                },
                {
                  "parameterName": "interceptors",
                  "parameterTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 18
                  }
                },
                {
                  "parameterName": "defaultState",
                  "parameterTypeTokenRange": {
                    "startIndex": 19,
                    "endIndex": 20
                  }
                },
                {
                  "parameterName": "storeSettings",
                  "parameterTypeTokenRange": {
                    "startIndex": 21,
                    "endIndex": 22
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "state-management!Store.defaultState:member",
              "docComment": "/**\n * Default global state\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultState: "
                },
                {
                  "kind": "Reference",
                  "text": "Maybe",
                  "canonicalReference": "state-management!Maybe:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Object",
                  "canonicalReference": "!Object:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "defaultState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "state-management!StoreSettings:interface",
          "docComment": "/**\n * Represents an object with store configurations. Provided with token {@link STORE_SETTINGS}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StoreSettings "
            }
          ],
          "releaseTag": "Public",
          "name": "StoreSettings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!StoreSettings#logStateChanges:member",
              "docComment": "/**\n * Set to true if state changes should be logged to console for debugging purposes. WARNING! Should be set to false in production builds!\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logStateChanges?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "logStateChanges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "state-management!StoreSettings#strictImmutability:member",
              "docComment": "/**\n * Set to true to freeze all actions and state. Helps with debugging the immutability of the system. WARNING! Should be set to false in production builds!\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strictImmutability?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strictImmutability",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
