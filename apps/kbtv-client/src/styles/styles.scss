/* You can add global styles to this file, and also import other style files */
@use '~@angular/material' as mat;
@import './variables';
@import './app-animations.scss';
@import './spacing.scss';

@include gap-units($gap-size);

html:root{
  --ion-color-primary: black;
  --bottom-nav-inner-height: 48px;
  --bottom-nav-padding: 8px;
  --bottom-nav-height: calc(var(--bottom-nav-inner-height) +  var(--bottom-nav-padding));
  --gap-size: #{$gap-size * 1px};
  --primary-color: #{mat.get-color-from-palette($app-primary)};
  --primary-contrast: #{mat.get-color-from-palette($app-primary, default-contrast)};
  --accent-color: #{mat.get-color-from-palette($app-accent)};
  --accent-contrast: #{mat.get-color-from-palette($app-accent, default-contrast)};
}

html, body { height: 100%; overflow:hidden;padding:0;margin:0; overflow-x:hidden}
body {font-family: Roboto, "Helvetica Neue", sans-serif;overflow-x:hidden;}

.primary{
  background-color: var(--primary);
  color: var(--primary-contrast);
}

.bg-app{ background: mat.get-color-from-palette($background, status-bar) }

.bg-card{
  background: mat.get-color-from-palette($background, card);
}

.accent{
  background-color:var(--accent-color);
  color: mat.get-color-from-palette($app-accent, default-contrast);
}

.color-accent{
  color: var(--accent-color);
}

.warn{
  background-color: mat.get-color-from-palette($app-warn);
  color: mat.get-color-from-palette($app-warn, default-contrast);
}

.color-warn{
  color: mat.get-color-from-palette($app-warn);
}

.foreground-card{
  background-color:mat.get-color-from-palette($background, card);
}

.bottom-bar-padding{ padding-bottom: var(--bottom-nav-height)!important; }

.main-skeleton-fullscreen { padding-bottom: 0px!important; margin-bottom: 0px!important; }
  
@media (max-width: 599px) {
  .mission-position-picker-sheet { 
    max-height: 100vh!important; 
    max-width: 100vw!important;
  }
}
.mission-position-picker-sheet { 
  height: 100vh!important; 
  padding: 0!important; 
  width: 100vw!important;
}

.line-height-100{line-height:100%}

.max-width{max-width:600px!important;}

.extended-dialog{
  max-width:90vw!important;
  .mat-dialog-container { padding:0 !important }
}

.h-100{height:100%;}

.w-100{width:100%;}

a {
  color: inherit; 
  text-decoration: inherit; 
}

.notification-error{
  margin-bottom:110px!important;
  @extend .warn;
}

.notification-success{
  margin-bottom:110px!important;
  background: mat.get-color-from-palette($app-success);
  color:black;
}

.notification-warning{
  margin-bottom:110px!important;
  background: mat.get-color-from-palette($app-warning);
  color:black;
}

.ellipsis{
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.loading-overlay{pointer-events: none; position:relative;}
.loading-overlay::after {
  content: ""; // ::before and ::after both require content
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #000;
  opacity: .5;
}

.multi-checkbox-group{
  .question-container{
    flex-flow: row wrap!important;
    box-sizing: border-box!important;
    display: flex!important;
    align-content: center!important;
    justify-content: flex-start!important;
    align-items: center!important;
  }
}

.mission-date-range-question-group{
  .question-container > * { margin: 16px 16px 0px 0px!important; }
}

.timesheet-date-range-question-group{
  app-ion-date-question { margin: 0 16px 0 0!important; }
}

.timesheet-date-time-question-group{
  .question-container > * { margin: 24px 16px 0px 0px!important; }
}

.mission-details-min-width { min-width: 370px; }
